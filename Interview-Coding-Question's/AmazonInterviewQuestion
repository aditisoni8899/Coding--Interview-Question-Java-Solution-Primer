 given a large array of numbers in which each number is within a range
[l <= number_in_array <= h], find the best approach to sort the array.

length of array - n
l - 0
h - 10000

l = 0
h = 10
n - 5
first problem:
1 1 1 6 6 6 8 2 2 3 3 1 2
second problem:
1 1 -1 -2 -6 -8

input : 1 -1 1 2
output 1 2

int[] radixSort(int arr[], int n){
    int m = getMax(arr, n);
    for(int i =1; m/i >0; i*=10){
        sortingLogic(arr, n, i);
    }
    return arr;
}
int getMax(int[] array, int len){
    int maximum = array[0];
    for(int i=1; i<len ;i++){
        if(array[i] > maximum){
            maximum = array[i];
        }
    }
    return maximum;
}
void sortingLogic(int a[], int n, int index)
{
    a = getAllPositive(a);
    int[] count = new int[10];
    int result[] = new int[n];
    int i;
    for(int j=0;j<10;j++)
    count[i]=0;

    for(i=0;i<n;i++)
    {
        count[a[i]/index % 10]++;
    }

    for(i=1;i<10;i++)
    {
        count[i]+=count[i-1];
    }

    for(i=n-1;i>=0;i--)
    {
        result[count[(a[i]/index)%10]-1] = a[i];
        count[(a[i]/index)%10]--;
    }

    for(i=0;i<n;i++)
        a[i]=result[i];
}

void separateArray(int a[], n){
    int min
}

int[] merge(int ps[],int ng[])
{
    for(int i=0;i<ng.length;i++)
    {
        int tmp = -ng[i];
        int count=0;
        for(int j=0;j<ps.length;j++)
        {
            if(count!=0)
            {

            }
            if(ps[j]==tmp)
            {
                ps[j]=0;
                count++;
            }


        }
    }
}
Input 1 -1 1 2
After positive:
1  1 2
Afeter negative:
-1
After merge:
[1,2]